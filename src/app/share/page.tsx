import { Metadata } from 'next';
import { notFound } from 'next/navigation';

// Generate metadata on the server side
export async function generateMetadata({ searchParams }: {
  searchParams: { [key: string]: string | string[] | undefined }
}): Promise<Metadata> {
  // Get parameters
  const title = searchParams?.title as string || 'EngagePerfect Caption';
  const caption = searchParams?.caption as string || '';
  const mediaUrl = searchParams?.mediaUrl as string;
  
  // Create a properly formatted excerpt (truncate if needed)
  const excerpt = caption.length > 150 ? `${caption.substring(0, 147)}...` : caption;
  
  // Return server-rendered metadata
  return {
    title: `${title} | EngagePerfect`,
    description: excerpt,
    openGraph: {
      title: title,
      description: excerpt,
      url: 'https://engageperfect.com/share',
      siteName: 'EngagePerfect',
      images: [
        {
          url: mediaUrl || 'https://engageperfect.com/og-image.jpg',
          width: 1200,
          height: 630,
          alt: title,
        },
      ],
      locale: 'en_US',
      type: 'article',
    },
    twitter: {
      card: 'summary_large_image',
      title: title,
      description: excerpt,
      images: [mediaUrl || 'https://engageperfect.com/og-image.jpg'],
    }
  };
}

export default function SharePage({ 
  searchParams 
}: {
  searchParams: { [key: string]: string | string[] | undefined }
}) {
  // Get and validate parameters
  const title = searchParams?.title as string;
  const caption = searchParams?.caption as string;
  const cta = searchParams?.cta as string;
  const hashtagsParam = searchParams?.hashtags as string;
  const mediaUrl = searchParams?.mediaUrl as string;
  
  // Ensure title and caption exist
  if (!title && !caption) {
    notFound();
  }
  
  // Parse hashtags safely
  let hashtags: string[] = [];
  try {
    if (hashtagsParam) {
      hashtags = JSON.parse(hashtagsParam);
    }
  } catch (e) {
    console.error('Failed to parse hashtags:', e);
  }
  
  return (
    <div className="container mx-auto p-4">
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 max-w-2xl mx-auto">
        <h1 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">{title}</h1>
        
        {mediaUrl && (
          <div className="mb-6 text-center">
            {mediaUrl.includes('.mp4') || mediaUrl.includes('.webm') ? (
              <video 
                controls 
                className="w-full rounded-lg max-h-[600px] object-contain"
                src={mediaUrl}
                title={title}
              />
            ) : (
              <img 
                src={mediaUrl} 
                alt={title} 
                className="w-full rounded-lg max-h-[600px] object-contain" 
              />
            )}
          </div>
        )}
        
        <p className="whitespace-pre-wrap mb-4 text-gray-700 dark:text-gray-300">{caption}</p>
        
        {hashtags.length > 0 && (
          <div className="flex flex-wrap gap-2 mb-4">
            {hashtags.map((tag, index) => (
              <span key={index} className="text-blue-600 dark:text-blue-400">#{tag}</span>
            ))}
          </div>
        )}
        
        {cta && (
          <p className="text-gray-600 dark:text-gray-400 italic mb-6">{cta}</p>
        )}
        
        <div className="mt-6 text-center">
          <p className="text-sm text-gray-500 dark:text-gray-400">
            Generated by <a href="https://engageperfect.com" className="text-blue-600 dark:text-blue-400">EngagePerfect AI</a>
          </p>
        </div>
      </div>
    </div>
  );
}